--== Initialization ==--
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

-- Wait for LocalPlayer
local player
repeat
    player = Players.LocalPlayer
    if not player then
        task.wait(0.1)
    end
until player

-- Load UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/x2zu/OPEN-SOURCE-UI-ROBLOX/refs/heads/main/X2ZU%20UI%20ROBLOX%20OPEN%20SOURCE/DummyUi-leak-by-x2zu/fetching-main/Tools/Framework.luau"))()

--== Lurnai Core Functions ==--
local Lurnai = {}
Lurnai.LocalPlayer = player
Lurnai.PlayerGui = Lurnai.LocalPlayer:WaitForChild("PlayerGui")
Lurnai.ShecklesUI = Lurnai.PlayerGui:WaitForChild("Sheckles_UI")
Lurnai.MoneyUI = Lurnai.ShecklesUI:WaitForChild("Money")
Lurnai.Item_Module = require(ReplicatedStorage.Item_Module)
Lurnai.MutationHandler = require(ReplicatedStorage.Modules.MutationHandler)
Lurnai.PetUtilities = require(ReplicatedStorage.Modules.PetServices.PetUtilities)
Lurnai.PetRegistry = require(ReplicatedStorage.Data.PetRegistry)
Lurnai.NumberUtil = require(ReplicatedStorage.Modules.NumberUtil)
Lurnai.DataService = require(ReplicatedStorage.Modules.DataService)

function Lurnai.CalculatePlantValue(plant)
    local itemString = plant:FindFirstChild("Item_String")
    if not itemString then return 0 end

    local variant = plant:FindFirstChild("Variant")
    if not variant then return 0 end

    local weight = plant:FindFirstChild("Weight")
    if not weight then return 0 end

    local itemData = Lurnai.Item_Module.Return_Data(itemString.Value)
    if not itemData or #itemData < 3 then return 0 end

    local baseValue = itemData[3]
    local weightRequirement = itemData[2]
    local variantMultiplier = Lurnai.Item_Module.Return_Multiplier(variant.Value)
    local mutationMultiplier = Lurnai.MutationHandler:CalcValueMulti(plant)
    local plantValue = baseValue * mutationMultiplier * variantMultiplier
    local weightRatio = math.clamp(weight.Value / weightRequirement, 0.95, 100000000)
    local finalValue = plantValue * (weightRatio * weightRatio)

    return math.round(finalValue)
end

function Lurnai.CalculatePetValue(petTool)
    if not petTool then return 0 end

    local itemType = petTool:GetAttribute("ItemType")
    if itemType ~= "Pet" then return 0 end

    local petUUID = petTool:GetAttribute("PET_UUID")
    if not petUUID then return 0 end

    local success, playerData = pcall(function()
        return Lurnai.DataService:GetData()
    end)

    if not success or not playerData then return 0 end

    local petData = playerData.PetsData.PetInventory.Data[petUUID]
    if not petData then return 0 end

    local hatchedFrom = petData.PetData.HatchedFrom
    if not hatchedFrom or hatchedFrom == "" then return 0 end

    local eggData = Lurnai.PetRegistry.PetEggs[hatchedFrom]
    if not eggData then return 0 end

    local petTypeData = eggData.RarityData.Items[petData.PetType]
    if not petTypeData then return 0 end

    local weightRange = petTypeData.GeneratedPetData.WeightRange
    if not weightRange then return 0 end

    local weightProgress = Lurnai.NumberUtil.ReverseLerp(weightRange[1], weightRange[2], petData.PetData.BaseWeight)
    local weightMultiplier = math.lerp(0.8, 1.2, weightProgress)

    local levelProgress = Lurnai.PetUtilities:GetLevelProgress(petData.PetData.Level)
    local levelMultiplier = math.lerp(0.15, 6, levelProgress)

    local baseSellPrice = Lurnai.PetRegistry.PetList[petData.PetType].SellPrice
    local finalValue = baseSellPrice * weightMultiplier * levelMultiplier

    return math.floor(finalValue)
end

function Lurnai.FormatNumber(num)
    local formatted = tostring(num)
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", "%1,%2")
        if k == 0 then break end
    end
    return formatted
end

function Lurnai.CalculateHeldItemValue()
    local character = Lurnai.LocalPlayer.Character
    if not character then return 0 end

    local tool = character:FindFirstChildOfClass("Tool")
    if not tool then return 0 end

    if tool:FindFirstChild("Item_String") then
        return Lurnai.CalculatePlantValue(tool)
    end

    if tool:GetAttribute("ItemType") == "Pet" then
        return Lurnai.CalculatePetValue(tool)
    end

    return 0
end

function Lurnai.CalculateInventoryValue()
    local backpack = Lurnai.LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return 0 end

    local totalValue = 0

    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            if tool:FindFirstChild("Item_String") then
                totalValue = totalValue + Lurnai.CalculatePlantValue(tool)
            end
            if tool:GetAttribute("ItemType") == "Pet" then
                totalValue = totalValue + Lurnai.CalculatePetValue(tool)
            end
        end
    end

    local character = Lurnai.LocalPlayer.Character
    if character then
        local equippedTool = character:FindFirstChildOfClass("Tool")
        if equippedTool then
            if equippedTool:FindFirstChild("Item_String") then
                totalValue = totalValue + Lurnai.CalculatePlantValue(equippedTool)
            end
            if equippedTool:GetAttribute("ItemType") == "Pet" then
                totalValue = totalValue + Lurnai.CalculatePetValue(equippedTool)
            end
        end
    end

    return totalValue
end

function Lurnai.UpdateHeldItemDisplay()
    local value = Lurnai.CalculateHeldItemValue()
    Lurnai.MoneyUI.Text = "Worth: $" .. Lurnai.FormatNumber(value)
    Lurnai.MoneyUI.Visible = value > 0
end

function Lurnai.UpdateInventoryDisplay()
    local totalValue = Lurnai.CalculateInventoryValue()
    Lurnai.InventoryValueUI.Text = "Inventory: $" .. Lurnai.FormatNumber(totalValue)
    Lurnai.InventoryValueUI.Visible = true
end

--== Mutation ESP ==--
local config = {
    espEnabled = true,
    mutations = {
        ["Wet"] = true, ["Gold"] = true, ["Frozen"] = true, ["Rainbow"] = true,
        ["Choc"] = true, ["Chilled"] = true, ["Shocked"] = true, ["Moonlit"] = true,
        ["Bloodlit"] = true, ["Celestial"] = true, ["Plasma"] = true, ["Disco"] = true,
        ["Zombified"] = true
    },
    showTextLabels = true,
    showGlowEffects = true
}

local espObjects = {}
local processedFruits = {}
local mutationOptions = {
    "Wet", "Gold", "Frozen", "Rainbow", "Choc", "Chilled", 
    "Shocked", "Moonlit", "Bloodlit", "Celestial", "Plasma", 
    "Disco", "Zombified"
}

local mutationColors = {
    Wet = Color3.fromRGB(0, 120, 255), Gold = Color3.fromRGB(255, 215, 0),
    Frozen = Color3.fromRGB(135, 206, 250), Rainbow = Color3.fromRGB(255, 255, 255),
    Choc = Color3.fromRGB(139, 69, 19), Chilled = Color3.fromRGB(0, 255, 255),
    Shocked = Color3.fromRGB(255, 255, 0), Moonlit = Color3.fromRGB(160, 32, 240),
    Bloodlit = Color3.fromRGB(200, 0, 0), Celestial = Color3.fromRGB(200, 150, 255),
    Plasma = Color3.fromRGB(0, 255, 127), Disco = Color3.fromRGB(255, 0, 255),
    Zombified = Color3.fromRGB(75, 83, 32)
}

local rarityTiers = {
    {mutations = {"Wet"}, tier = 1},
    {mutations = {"Gold", "Frozen", "Choc", "Chilled", "Shocked"}, tier = 2},
    {mutations = {"Rainbow", "Moonlit", "Bloodlit", "Plasma", "Disco"}, tier = 3},
    {mutations = {"Celestial", "Zombified"}, tier = 4}
}

local function getMutationTier(mutation)
    for _, tier in ipairs(rarityTiers) do
        if table.find(tier.mutations, mutation) then
            return tier.tier
        end
    end
    return 1
end

local function cleanupESP()
    for _, obj in pairs(espObjects) do
        if obj and typeof(obj) == "table" then
            for _, item in pairs(obj) do
                if item and item.Parent then
                    item:Destroy()
                end
            end
        end
    end
    espObjects = {}
    processedFruits = {}
end

local function createGlowEffect(baseColor, parent)
    local glow = Instance.new("BillboardGui")
    glow.Name = "GlowEffect"
    glow.Size = UDim2.fromOffset(6, 6)
    glow.Adornee = parent
    glow.AlwaysOnTop = true

    local image = Instance.new("ImageLabel")
    image.Size = UDim2.fromScale(1, 1)
    image.BackgroundTransparency = 1
    image.Image = "rbxassetid://1316045217"
    image.ImageColor3 = baseColor
    image.ImageTransparency = 0.2
    image.Parent = glow

    return glow
end

local function createESP(fruitModel)
    if not config.espEnabled or not fruitModel or not fruitModel:IsA("Model") or processedFruits[fruitModel] then return end

    local activeMutations = {}
    for _, mutation in ipairs(mutationOptions) do
        if config.mutations[mutation] and fruitModel:GetAttribute(mutation) then
            table.insert(activeMutations, mutation)
        end
    end

    if #activeMutations == 0 then return end
    processedFruits[fruitModel] = true

    local highestTier = 0
    local primaryMutation = activeMutations[1]

    for _, mutation in ipairs(activeMutations) do
        local tier = getMutationTier(mutation)
        if tier > highestTier then
            highestTier = tier
            primaryMutation = mutation
        end
    end

    local espColor = mutationColors[primaryMutation] or Color3.fromRGB(255, 255, 255)
    local espObjects_current = {}

    local highlight = Instance.new("Highlight")
    highlight.Name = "MutationESP_Highlight"
    highlight.FillTransparency = 0.7
    highlight.OutlineColor = espColor
    highlight.FillColor = espColor
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.Occluded
    highlight.Adornee = fruitModel
    highlight.Parent = fruitModel
    table.insert(espObjects_current, highlight)

    if config.showHousingEffects and highestTier >= 3 then
        local tweenInfo = TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
        local pulseUp = TweenService:Create(highlight, tweenInfo, {OutlineTransparency = 0.5, FillTransparency = 0.9})
        pulseUp:Play()
    end

    local primaryPart = fruitModel.PrimaryPart or fruitModel:FindFirstChildWhichIsA("BasePart")
    if primaryPart then
        if config.showTextLabels then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "MutationESP_Billboard"
            billboard.Adornee = primaryPart
            billboard.Size = UDim2.fromOffset(150, 30)
            billboard.StudsOffset = Vector3.new(0, 2, 0)
            billboard.AlwaysOnTop = true
            billboard.MaxDistance = 100

            local frame = Instance.new("Frame")
            frame.Size = UDim2.fromScale(1, 1)
            frame.BackgroundTransparency = 0.3
            frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)

            local uiCorner = Instance.new("UICorner")
            uiCorner.CornerRadius = UDim.new(0, 8)
            uiCorner.Parent = frame

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Color = espColor
            uiStroke.Thickness = 2
            uiStroke.Parent = frame

            local gradient = Instance.new("UIGradient")
            gradient.Rotation = 45
            gradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 15, 15))
            })
            gradient.Parent = frame

            local nameLabel = Instance.new("TextLabel")
            nameLabel.Size = UDim2.new(1, 0, 0.4, 0)
            nameLabel.Position = UDim2.new(0, 0, 0, 2)
            nameLabel.BackgroundTransparency = 1
            nameLabel.Text = fruitModel.Name
            nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            nameLabel.TextScaled = true
            nameLabel.Font = Enum.Font.GothamBold
            nameLabel.Parent = frame

            local mutationText = table.concat(activeMutations, " • ")
            local mutationLabel = Instance.new("TextLabel")
            mutationLabel.Size = UDim2.new(1, 0, 0.6, 0)
            mutationLabel.Position = UDim2.new(0, 0, 0.4, 0)
            mutationLabel.BackgroundTransparency = 1
            mutationLabel.Text = mutationText
            mutationLabel.TextColor3 = espColor
            mutationLabel.TextScaled = true
            mutationLabel.Font = Enum.Font.GothamSemibold
            mutationLabel.Parent = frame

            frame.Parent = billboard
            billboard.Parent = fruitModel
            table.insert(espObjects_current, billboard)
        end

        if config.showGlowEffects and highestTier >= 2 then
            local glow = createGlowEffect(espColor, primaryPart)
            glow.Parent = fruitModel
            table.insert(espObjects_current, glow)

            if highestTier >= 4 then
                for i = 1, 3 do
                    local orb = Instance.new("Part")
                    orb.Name = "MutationOrb_" .. i
                    orb.Shape = Enum.PartType.Ball
                    orb.Size = Vector3.new(0.3, 0.3, 0.3)
                    orb.Material = Enum.Material.Neon
                    orb.Color = espColor
                    orb.CanCollide = false
                    orb.Anchored = true
                    orb.Transparency = 0.3
                    orb.Parent = fruitModel

                    spawn(function()
                        local offset = (i-1) * (2*math.pi/3)
                        while orb and orb.Parent do
                            local t = tick() * 2 + offset
                            local radius = 2
                            local height = math.sin(t) * 0.5
                            local pos = primaryPart.Position + Vector3.new(
                                math.cos(t) * radius,
                                height + 1,
                                math.sin(t) * radius
                            )
                            orb.Position = pos
                            RunService.Heartbeat:Wait()
                        end
                    end)

                    table.insert(espObjects_current, orb)
                end
            end
        end
    end

    espObjects[fruitModel] = espObjects_current

    fruitModel.AncestryChanged:Connect(function(_, parent)
        if not parent then
            if espObjects[fruitModel] then
                for _, obj in pairs(espObjects[fruitModel]) do
                    if obj and obj.Parent then
                        obj:Destroy()
                    end
                end
                espObjects[fruitModel] = nil
                processedFruits[fruitModel] = nil
            end
        end
    end)
end

local function updateESP()
    local farms = {}
    if not Workspace:FindFirstChild("Farm") then return end

    for _, farm in ipairs(Workspace.Farm:GetChildren()) do
        local data = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Data")
        if data and data:FindFirstChild("Owner") and data.Owner.Value == player.Name then
            table.insert(farms, farm)
        end
    end

    for _, farm in ipairs(farms) do
        local plantsFolder = farm.Important:FindFirstChild("Plants_Physical")
        if plantsFolder then
            for _, plantModel in ipairs(plantsFolder:GetChildren()) do
                if plantModel:IsA("Model") then
                    local fruitsFolder = plantModel:FindFirstChild("Fruits")
                    if fruitsFolder then
                        for _, fruitModel in ipairs(fruitsFolder:GetChildren()) do
                            if fruitModel:IsA("Model") then
                                createESP(fruitModel)
                            end
                        end
                    end
                end
            end
        end
    end
end

local function setupFruitMonitoring()
    local farms = Workspace:FindFirstChild("Farm")
    if not farms then return end

    for _, farm in ipairs(farms:GetChildren()) do
        local data = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Data")
        if data and data:FindFirstChild("Owner") and data.Owner.Value == player.Name then
            local plantsFolder = farm.Important:FindFirstChild("Plants_Physical")
            if plantsFolder then
                plantsFolder.ChildAdded:Connect(function(plantModel)
                    if plantModel:IsA("Model") then
                        task.spawn(function()
                            local fruitsFolder = plantModel:FindFirstChild("Fruits") or plantModel:WaitForChild("Fruits", 10)
                            if fruitsFolder then
                                fruitsFolder.ChildAdded:Connect(function(fruitModel)
                                    if fruitModel:IsA("Model") then
                                        task.wait(0.2)
                                        createESP(fruitModel)
                                    end
                                end)

                                for _, fruitModel in ipairs(fruitsFolder:GetChildren()) do
                                    if fruitModel:IsA("Model") then
                                        createESP(fruitModel)
                                    end
                                end
                            end
                        end)
                    end
                end)
            end
        end
    end
end

--== UI Setup ==--
local Window = Library:Window({
    Title = "Souls Hub | Grow a Garden",
    Desc = "by rintoshii",
    Icon = "leaf",
    Theme = "Dark",
    Config = {
        Keybind = Enum.KeyCode.LeftControl,
        Size = UDim2.new(0, 530, 0, 400)
    },
    CloseUIButton = {
        Enabled = true,
        Text = "Close UI"
    }
})

-- Info Tab
local InfoTab = Window:Tab({Title = "Info", Icon = "info-circle"}) do
    InfoTab:Section({Title = "Info"})
    InfoTab:Label({Title = "Souls Hub " .. player.Name, Desc = "Thanks for using Souls Hub :D"})

    InfoTab:Section({Title = "Creator"})
    InfoTab:Label({Title = "Made by rintoshiii", Desc = "My Discord: rintoshiii"})
    InfoTab:Label({Title = "Souls Hub", Desc = "Made by Rin and Souls"})
    InfoTab:Label({Title = "https://discord.gg/QG5PHd7mVD", Desc = "Join for more"})

    InfoTab:Section({Title = "Links (Socials)"})
    InfoTab:Button({
        Title = "Discord (rintoshiii)",
        Callback = function()
            setclipboard("@rintoshiii")
        end
    })
    InfoTab:Button({
        Title = "Souls (Owner) (soulshub_)",
        Callback = function()
            setclipboard("@soulshub_")
        end
    })
    InfoTab:Button({
        Title = "Click to Join Discord",
        Callback = function()
            setclipboard("https://discord.gg/QG5PHd7mVD")
        end
    })
end

-- Main Tab
local MainTab = Window:Tab({Title = "Main", Icon = "home"}) do
    MainTab:Section({Title = "Inventory Display"})
    MainTab:Toggle({
        Title = "Show Held Item Value",
        Desc = "Display value of held item",
        Value = false,
        Callback = function(state)
            Lurnai.MoneyUI.Visible = state
            if state then
                Lurnai.UpdateHeldItemDisplay()
            end
        end
    })
    MainTab:Toggle({
        Title = "Show Inventory Value",
        Desc = "Display total inventory value",
        Value = true,
        Callback = function(state)
            Lurnai.InventoryValueUI.Visible = state
            if state then
                Lurnai.UpdateInventoryDisplay()
            end
        end
    })
end

-- ESP Tab
local EspTab = Window:Tab({Title = "ESP", Icon = "eye"}) do
    EspTab:Section({Title = "Mutation ESP"})
    EspTab:Toggle({
        Title = "Enable Mutation ESP",
        Desc = "Show ESP for mutated fruits",
        Value = config.espEnabled,
        Callback = function(state)
            config.espEnabled = state
            if state then
                updateESP()
                setupFruitMonitoring()
            else
                cleanupESP()
            end
        end
    })
    EspTab:Toggle({
        Title = "Show Text Labels",
        Desc = "Display mutation names",
        Value = config.showTextLabels,
        Callback = function(state)
            config.showTextLabels = state
            cleanupESP()
            if config.espEnabled then
                updateESP()
            end
        end
    })
    EspTab:Toggle({
        Title = "Show Glow Effects",
        Desc = "Display glow and particle effects",
        Value = config.showGlowEffects,
        Callback = function(state)
            config.showGlowEffects = state
            cleanupESP()
            if config.espEnabled then
                updateESP()
            end
        end
    })

    EspTab:Section({Title = "Mutation Filters"})
    for _, mutation in ipairs(mutationOptions) do
        EspTab:Toggle({
            Title = mutation .. " ESP",
            Desc = "Toggle ESP for " .. mutation .. " mutation",
            Value = config.mutations[mutation],
            Callback = function(state)
                config.mutations[mutation] = state
                cleanupESP()
                if config.espEnabled then
                    updateESP()
                end
            end
        })
    end
end

-- Script Tab
local ScriptTab = Window:Tab({Title = "Script", Icon = "code"}) do
    ScriptTab:Section({Title = "FE Admin"})
    ScriptTab:Button({
        Title = "Universal (Infinite Yield) - (FE)",
        Callback = function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
        end
    })
    ScriptTab:Button({
        Title = "Universal (Nameless Admin) - (FE)",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/ltseverydayyou/Nameless-Admin/main/Source.lua"))()
        end
    })
    ScriptTab:Button({
        Title = "Universal (Fly V3) - (FE)",
        Callback = function()
            loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Gui-Fly-v3-37111"))()
        end
    })
end

--== Setup Connections ==--
Lurnai.InventoryValueUI = Lurnai.MoneyUI:Clone()
Lurnai.InventoryValueUI.Name = "InventoryValue"
Lurnai.InventoryValueUI.Parent = Lurnai.ShecklesUI

local originalPosition = Lurnai.MoneyUI.Position
Lurnai.MoneyUI.Position = UDim2.new(originalPosition.X.Scale, originalPosition.X.Offset, originalPosition.Y.Scale, originalPosition.Y.Offset - 50)
Lurnai.InventoryValueUI.Position = UDim2.new(originalPosition.X.Scale, originalPosition.X.Offset, originalPosition.Y.Scale, originalPosition.Y.Offset - 36)

Lurnai.connection = RunService.Heartbeat:Connect(function()
    if Lurnai.MoneyUI.Visible then
        Lurnai.UpdateHeldItemDisplay()
    end
    if Lurnai.InventoryValueUI.Visible then
        Lurnai.UpdateInventoryDisplay()
    end
end)

local backpack = Lurnai.LocalPlayer:WaitForChild("Backpack")
backpack.ChildAdded:Connect(Lurnai.UpdateInventoryDisplay)
backpack.ChildRemoved:Connect(Lurnai.UpdateInventoryDisplay)

Lurnai.LocalPlayer.CharacterAdded:Connect(function(character)
    character.ChildAdded:Connect(Lurnai.UpdateInventoryDisplay)
    character.ChildRemoved:Connect(Lurnai.UpdateInventoryDisplay)
end)

Lurnai.PlayerRemoving = Players.PlayerRemoving:Connect(function(p)
    if p == Lurnai.LocalPlayer then
        Lurnai.connection:Disconnect()
        cleanupESP()
    end
end)

-- Initial ESP Setup
if config.espEnabled then
    updateESP()
    setupFruitMonitoring()
end

task.spawn(function()
    while true do
        if config.espEnabled then
            updateESP()
        else
            cleanupESP()
        end
        for model, objList in pairs(espObjects) do
            if not model or not model.Parent then
                for _, obj in pairs(objList) do
                    if obj and obj.Parent then
                        obj:Destroy()
                    end
                end
                espObjects[model] = nil
                processedFruits[model] = nil
            end
        end
        task.wait(2)
    end
end)

-- Final Notification
Window:Notify({
    Title = "Souls Hub Loaded",
    Desc = "Grow a Garden script loaded successfully!",
    Time = 4
})
